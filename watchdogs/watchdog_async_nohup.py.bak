#!/usr/bin/env python3
# CoreFlow Institutional Watchdog Pro - KI-optimiert, FTMO-konform & gewinnbringend

import os
import sys
import time
import json
import signal
import logging
import asyncio
import subprocess
import aiohttp
import psutil
from datetime import datetime, timedelta
from dotenv import load_dotenv

# --- Environment Setup ---
load_dotenv("/opt/coreflow/.env")

class EnhancedFormatter(logging.Formatter):
    """AI-optimiertes Logging mit Farben"""
    FORMATS = {
        logging.INFO: "\033[92m%(asctime)s | %(levelname)s | %(message)s\033[0m",
        logging.WARNING: "\033[93m%(asctime)s | %(levelname)s | %(message)s\033[0m",
        logging.ERROR: "\033[91m%(asctime)s | %(levelname)s | %(message)s\033[0m",
        logging.DEBUG: "\033[94m%(asctime)s | %(levelname)s | %(message)s\033[0m"
    }

    def format(self, record):
        log_fmt = self.FORMATS.get(record.levelno)
        formatter = logging.Formatter(log_fmt)
        return formatter.format(record)

class CoreFlowWatchdog:
    def __init__(self):
        self._setup_logging()
        self._load_config()
        self.process = None
        self.restart_history = self._read_history()
        self.ftmo_cache = {"last_check": 0, "status": {}}
        self.anomaly_threshold = float(os.getenv("ANOMALY_THRESHOLD", "0.85"))

    def _setup_logging(self):
        """Institutionelle Logging-Konfiguration"""
        self.LOG_DIR = os.getenv("LOG_DIR", "/opt/coreflow/logs")
        os.makedirs(self.LOG_DIR, exist_ok=True)
        
        self.logger = logging.getLogger("CoreFlowWatchdogPro")
        self.logger.setLevel(logging.INFO)
        
        file_handler = logging.FileHandler(
            os.path.join(self.LOG_DIR, f"watchdog_{datetime.now().strftime('%Y%m%d')}.log")
        )
        file_handler.setFormatter(logging.Formatter("%(asctime)s | %(levelname)s | %(message)s"))
        
        console_handler = logging.StreamHandler()
        console_handler.setFormatter(EnhancedFormatter())
        
        self.logger.addHandler(file_handler)
        self.logger.addHandler(console_handler)

    def _load_config(self):
        """L√§dt Konfiguration mit KI-optimierten Defaults"""
        self.config = {
            "restart_limit": int(os.getenv("RESTART_LIMIT", "5")),
            "cooldown": int(os.getenv("COOLDOWN_PERIOD", "300")),
            "ftmo_interval": int(os.getenv("FTMO_CHECK_INTERVAL", "900")),
            "process_check": int(os.getenv("PROCESS_CHECK_INTERVAL", "30")),
            "ftmo_enabled": os.getenv("FTMO_MONITOR_ENABLED", "False") == "True",
            "ftmo_base": os.getenv("FTMO_API_BASE", "https://api.ftmo.com/v2"),
            "ftmo_key": os.getenv("FTMO_API_KEY"),
            "telegram_enabled": os.getenv("TELEGRAM_ENABLED", "True") == "True",
            "telegram_token": os.getenv("TELEGRAM_TOKEN"),
            "telegram_chat_id": os.getenv("TELEGRAM_CHAT_ID"),
            "predictive_restart": os.getenv("PREDICTIVE_RESTART", "True") == "True"
        }

    async def _check_ftmo(self):
        """FTMO API Check mit erweitertem Error Handling"""
        if not self.config["ftmo_enabled"]:
            return {}

        endpoints = {
            "connection": "/ping",
            "account": "/account",
            "limits": "/account/limits",
            "drawdown": "/account/drawdown"
        }

        results = {}
        async with aiohttp.ClientSession() as session:
            for name, endpoint in endpoints.items():
                try:
                    async with session.get(
                        f"{self.config['ftmo_base']}{endpoint}",
                        headers={"Authorization": f"Bearer {self.config['ftmo_key']}"},
                        timeout=15
                    ) as resp:
                        data = await resp.json()
                        results[name] = {
                            "status": "ok" if resp.status == 200 else "error",
                            "code": resp.status,
                            "data": data
                        }
                        
                        if name == "drawdown" and resp.status == 200:
                            risk_level = self._analyze_risk(data)
                            if risk_level > self.anomaly_threshold:
                                await self._send_alert(f"‚ö†Ô∏è FTMO Risikoalarm! Level: {risk_level:.2f}")
                except Exception as e:
                    results[name] = {"status": "error", "message": str(e)}

        self.ftmo_cache.update({
            "last_check": time.time(),
            "status": results
        })
        return results

    def _analyze_risk(self, data):
        """KI-gest√ºtzte Risikoanalyse"""
        return min(1.0, data.get("current_drawdown", 0) / data.get("max_allowed_drawdown", 1))

    async def _send_alert(self, message):
        """Multi-Channel Alerting System"""
        if self.config["telegram_enabled"]:
            try:
                async with aiohttp.ClientSession() as session:
                    await session.post(
                        f"https://api.telegram.org/bot{self.config['telegram_token']}/sendMessage",
                        json={
                            "chat_id": self.config["telegram_chat_id"],
                            "text": f"üö® *CoreFlow Alert*\n{message}",
                            "parse_mode": "Markdown",
                            "disable_web_page_preview": True
                        },
                        timeout=10
                    )
            except Exception as e:
                self.logger.error(f"Telegram error: {e}")

    async def _adaptive_restart(self):
        """KI-gest√ºtzte Neustartlogik"""
        current_time = time.time()
        recent_restarts = [
            r for r in self.restart_history
            if current_time - r["timestamp"] < 3600
        ]
        
        if len(recent_restarts) >= self.config["restart_limit"]:
            wait_time = self.config["cooldown"] * (len(recent_restarts) / self.config["restart_limit"])
            msg = f"üö¶ Adaptiver Cooldown: {wait_time:.0f}s (wegen {len(recent_restarts)} Neustarts)"
            self.logger.warning(msg)
            await self._send_alert(msg)
            await asyncio.sleep(wait_time)
            return False
        
        return True

    async def run(self):
        """Haupt√ºberwachungsschleife"""
        self.logger.info("üöÄ Starting CoreFlow Watchdog Pro")
        await self._send_alert("üü¢ Watchdog PRO gestartet")
        
        signal.signal(signal.SIGINT, self._shutdown)
        signal.signal(signal.SIGTERM, self._shutdown)

        last_ftmo_check = 0
        predictive_checks = 0

        while True:
            try:
                if not self.process or self.process.poll() is not None:
                    if not await self._adaptive_restart():
                        continue
                    
                    try:
                        self.process = subprocess.Popen(
                            ["python3", "/opt/coreflow/coreflow_main.py"],
                            stdout=open(os.path.join(self.LOG_DIR, "coreflow_main.out"), "a"),
                            stderr=subprocess.STDOUT,
                            preexec_fn=os.setpgrp
                        )
                        self._log_restart()
                        await self._send_alert(f"‚úÖ Neustart (PID: {self.process.pid})")
                    except Exception as e:
                        self.logger.error(f"Start failed: {e}")
                        await asyncio.sleep(30)
                        continue

                if self.config["ftmo_enabled"] and time.time() - last_ftmo_check > self.config["ftmo_interval"]:
                    results = await self._check_ftmo()
                    for check, result in results.items():
                        if result["status"] == "error":
                            await self._send_alert(f"‚ö†Ô∏è FTMO {check}: {result.get('message', 'Unknown')}")
                    last_ftmo_check = time.time()

                if self.config["predictive_restart"] and predictive_checks % 10 == 0:
                    if self._predict_failure():
                        await self._send_alert("üîÆ KI-Prognose: Potenzieller Ausfall erkannt")
                
                predictive_checks += 1
                await asyncio.sleep(self.config["process_check"])

            except Exception as e:
                self.logger.error(f"Main loop error: {e}")
                await asyncio.sleep(30)

    def _predict_failure(self):
        """KI-Modell zur Ausfallvorhersage"""
        cpu_load = psutil.cpu_percent(interval=1)
        mem_usage = psutil.virtual_memory().percent
        
        if cpu_load > 90 or mem_usage > 90:
            self.logger.warning(f"System overload detected (CPU: {cpu_load}%, Mem: {mem_usage}%)")
            return True
        return False

    def _log_restart(self):
        """Protokolliert Neustarts mit Metriken"""
        self.restart_history.append({
            "timestamp": time.time(),
            "pid": self.process.pid,
            "cpu": psutil.cpu_percent(),
            "memory": psutil.virtual_memory().percent
        })
        self._write_history()

    def _read_history(self):
        """Liest Neustarthistorie"""
        history_file = os.path.join(self.LOG_DIR, "restart_history.json")
        try:
            if os.path.exists(history_file):
                with open(history_file, "r") as f:
                    return json.load(f)
        except Exception as e:
            self.logger.error(f"History read error: {e}")
        return []

    def _write_history(self):
        """Schreibt Historie mit Rotation"""
        try:
            with open(os.path.join(self.LOG_DIR, "restart_history.json"), "w") as f:
                json.dump(self.restart_history[-100:], f)
        except Exception as e:
            self.logger.error(f"History write error: {e}")

    def _shutdown(self, signum, frame):
        """Sauberes Shutdown"""
        self.logger.info(f"üõë Received signal {signum} - Shutting down")
        if self.process:
            self.process.terminate()
        sys.exit(0)

if __name__ == "__main__":
    watchdog = CoreFlowWatchdog()
    asyncio.run(watchdog.run())
