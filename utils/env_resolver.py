#!/usr/bin/env python3
import os
from pathlib import Path

# CoreFlow-konforme Pfade
TEMPLATE = "/opt/coreflow/config/.env.replay.template"
OUTPUT = "/opt/coreflow/config/.env.replay"
LOCKFILE = "/opt/coreflow/config/.env.replay.lock"

def resolve_env():
    # 1. Template lesen und Variablen extrahieren
    resolved = {}
    with open(TEMPLATE) as f:
        for line in f:
            line = line.strip()
            if not line or line.startswith('#'):
                continue
            if '=' not in line:
                continue
                
            key, val = line.split('=', 1)
            key = key.strip()
            val = val.split('#')[0].strip()  # Inline-Kommentare entfernen
            resolved[key] = val

    # 2. Rekursive Variablenersetzung (max. 5 Ebenen)
    for _ in range(5):
        changed = False
        for key in list(resolved.keys()):
            for k, v in resolved.items():
                new_val = resolved[key].replace(f"{{{k}}}", v)
                if new_val != resolved[key]:
                    resolved[key] = new_val
                    changed = True
        if not changed:
            break

    # 3. Shell-kompatible Ausgabe (Fish/Bash)
    with open(OUTPUT, 'w') as f:
        f.write("# AUTO-GENERATED BY COREFLOW ENV RESOLVER\n")
        for k, v in sorted(resolved.items()):
            # Sonderzeichen escapen
            v_escaped = v.replace('"', '\\"').replace('$', '\\$')
            f.write(f'export {k}="{v_escaped}"\n')

    # 4. Berechtigungen setzen
    os.chmod(OUTPUT, 0o640)
    Path(LOCKFILE).touch()  # Lock für Watchdog
    print(f"✓ Resolved ENV written to {OUTPUT}")

if __name__ == "__main__":
    resolve_env()
