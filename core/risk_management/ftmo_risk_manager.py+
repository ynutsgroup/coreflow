#!/usr/bin/env python3
"""
FTMO Risk Manager

Ein Risikomanager, der sicherstellt, dass das FTMO-Risikomanagement eingehalten wird.
Die wichtigsten Parameter sind:
- Maximale Anzahl von Trades pro Tag
- Maximales Risiko pro Trade
- Maximales tägliches Verlustlimit
"""

from datetime import datetime, timedelta, timezone

class FTMORiskManager:
    """FTMO Risikomanager für die Verwaltung und Überwachung von Trades und Risiken."""

    def __init__(self, max_daily_trades, max_risk_per_trade, max_daily_loss, starting_balance):
        """
        Initialisiert den FTMO Risikomanager.

        :param max_daily_trades: Maximale Anzahl von Trades pro Tag
        :param max_risk_per_trade: Maximales Risiko pro Trade (als Dezimalzahl, z. B. 0.02 für 2%)
        :param max_daily_loss: Maximales tägliches Verlustlimit (in Prozent, z. B. 0.05 für 5%)
        :param starting_balance: Startguthaben des Kontos
        """
        self.max_daily_trades = max_daily_trades
        self.max_risk_per_trade = max_risk_per_trade
        self.max_daily_loss = max_daily_loss
        self.starting_balance = starting_balance
        self.daily_trade_count = 0
        self.daily_loss = 0.0
        self.last_reset_date = datetime.now(timezone.utc).date()

    def _reset_daily_counts(self):
        """Zurücksetzen der täglichen Zählungen, wenn ein neuer Tag beginnt."""
        today = datetime.now(timezone.utc).date()
        if self.last_reset_date != today:
            self.daily_trade_count = 0
            self.daily_loss = 0.0
            self.last_reset_date = today
            print(f"Daily reset: {self.last_reset_date}")

    def validate_trade(self, trade_size, risk_percentage):
        """
        Validiert, ob ein Trade den FTMO-Risikoanforderungen entspricht.

        :param trade_size: Größe des Trades
        :param risk_percentage: Risiko des Trades als Prozentsatz des Kontos
        :return: (is_valid, reason) - Ob der Trade gültig ist und der Grund
        """
        self._reset_daily_counts()  # Zurücksetzen der täglichen Zählungen bei jedem neuen Trade

        if self.daily_trade_count >= self.max_daily_trades:
            return False, f"Max {self.max_daily_trades} Trades/Tag erreicht"

        if risk_percentage > self.max_risk_per_trade:
            return False, f"Risiko {risk_percentage*100}% > Maximum {self.max_risk_per_trade*100}%"

        # Berechnung des maximalen Verlustes
        potential_loss = trade_size * risk_percentage
        if self.daily_loss + potential_loss > self.starting_balance * self.max_daily_loss:
            return False, f"Potentieller Tagesverlust {self.daily_loss + potential_loss} > Maximum {self.starting_balance * self.max_daily_loss}"

        return True, "Trade validiert"

    def register_trade(self, trade_size, risk_percentage):
        """
        Registriert einen Trade und aktualisiert die täglichen Zählungen und Verluste.

        :param trade_size: Größe des Trades
        :param risk_percentage: Risiko des Trades als Prozentsatz des Kontos
        """
        is_valid, reason = self.validate_trade(trade_size, risk_percentage)
        if is_valid:
            self.daily_trade_count += 1
            self.daily_loss += trade_size * risk_percentage
            print(f"Trade registriert: {trade_size} (Risiko: {risk_percentage*100}%)")
        else:
            print(f"Trade abgelehnt: {reason}")

# Beispielverwendung
if __name__ == "__main__":
    # Erstellen des Risikomanagers mit einer maximalen Anzahl an 5 Trades pro Tag,
    # einem maximalen Risiko von 2% pro Trade und einem maximalen täglichen Verlustlimit von 5%
    risk_manager = FTMORiskManager(
        max_daily_trades=5,
        max_risk_per_trade=0.02,  # 2% Risiko pro Trade
        max_daily_loss=0.05,      # 5% täglicher Verlust
        starting_balance=100000.0
    )

    # Validieren und Registrieren von Trades
    risk_manager.register_trade(5000, 0.01)  # Gültiger Trade, 1% Risiko
    risk_manager.register_trade(3000, 0.03)  # Ungültiger Trade, Risiko 3%
    risk_manager.register_trade(5000, 0.02)  # Gültiger Trade, 2% Risiko
    risk_manager.register_trade(5000, 0.02)  # Gültiger Trade, 2% Risiko
    risk_manager.register_trade(5000, 0.02)  # Gültiger Trade, 2% Risiko
    risk_manager.register_trade(5000, 0.02)  # Maximaler Trade erreicht, sollte abgelehnt werden


